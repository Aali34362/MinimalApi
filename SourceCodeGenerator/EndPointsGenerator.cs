using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System;
using System.Collections.Immutable;
using System.Linq;
using System.Reflection.PortableExecutable;
using System.Text;

namespace SourceCodeGenerator;

[Generator]
public class EndPointsGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var provider = context
            .SyntaxProvider
            .CreateSyntaxProvider(
                (node, _) => node is ClassDeclarationSyntax,//predicate
                (syntaxContext, _) => (ClassDeclarationSyntax)syntaxContext.Node//transform
            ).Where(x => x is not null);

        var compilation = context
            .CompilationProvider
            .Combine(provider.Collect());
        context.RegisterSourceOutput(compilation, Execute);
    }

    private void Execute(SourceProductionContext context, (Compilation compilation, ImmutableArray<ClassDeclarationSyntax> classes) tuple)
    {
        var (compilation, classes) = tuple;
        
        var bldr = new StringBuilder();
        foreach (var syntax in classes)
        {
            var symbol = compilation.GetSemanticModel(syntax.SyntaxTree)
                          .GetDeclaredSymbol(syntax) as INamedTypeSymbol;

            if (!symbol!.AllInterfaces.Any(i => i.Name == "IEndpoints"))
            {
                continue;
            }
            bldr.AppendLine();
            bldr.Append($"           new {symbol.Name}().MapEndPoints(endpoints);");            
        }

        var prefixcode = $$"""
                //<auto-generated/>
                using MinimalApi.EndPoints;
                namespace MinimalApi.EndPoints;

                public static class EndpointsExtension
                {
                    public static IEndpointRouteBuilder MapAllEndpoints(this IEndpointRouteBuilder endpoints)
                    {
                """;
        var midcode = bldr.ToString();
        var suffixcode = $$"""  
                        return endpoints;
                    }
                }
                """;
        var code = new StringBuilder();
        code.AppendLine(prefixcode);
        code.AppendLine(midcode);
        code.AppendLine(suffixcode);
        context.AddSource("EndpointsExtension.cs", code.ToString());
    }
}
