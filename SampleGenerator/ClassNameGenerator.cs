using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System;
using System.Collections.Immutable;
using System.Text;

namespace SampleGenerator;

[Generator]
public class ClassNameGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var provider = context.SyntaxProvider.CreateSyntaxProvider(
            predicate: (c,_)=> c is ClassDeclarationSyntax,
            transform: (n, _) => (ClassDeclarationSyntax) n.Node).Where(m => m is not null);
        var compilation = context.CompilationProvider.Combine(provider.Collect());
        context.RegisterSourceOutput(compilation, (spc, source) => Execute(spc, source.Left, source.Right));
    }

    private void Execute(SourceProductionContext context, Compilation compilation, ImmutableArray<ClassDeclarationSyntax> typeList)
    {
        var bldr = new StringBuilder();
        foreach(var syntax in typeList)
        {
            var symbol = compilation.GetSemanticModel(syntax.SyntaxTree)
                .GetDeclaredSymbol(syntax) as INamedTypeSymbol;
            if(syntax is not null)
            {
                bldr.AppendLine();
                bldr.Append($"    \"{symbol.ToDisplayString()}\",");
            }   
        }
        if (bldr.Length > 0) bldr.Length--;
        Console.WriteLine($"Generated Names: {bldr}");
        var code = $$"""
                    //<auto-generated/>
                    namespace SampleGenerator
                    {
                        public static class EndpointsExtension
                        {
                            public static List<string> Names = new List<string>()
                            {
                                {{bldr.ToString()}}
                            };
                            public static string MapAllEndpoints(this string endpoints)
                            {
                                return endpoints;
                            }

                            public static int MapAllEndpoint(this int endpoints)
                            {
                                return endpoints;
                            }
                        }
                    }
                    """;
        context.AddSource("EndpointsExtension.g.cs", code);

        var codes = $$"""
                    //<auto-generated/>
                    namespace SampleGenerator
                    {
                        public static class ClassNames
                        {
                            public static List<string> Names = new List<string>()
                            {
                                {{bldr.ToString()}}
                            };
                            public static string MapAllEndpoints(this string endpoints)
                            {
                                return endpoints;
                            }

                            public static int MapAllEndpoint(this int endpoints)
                            {
                                return endpoints;
                            }
                        }
                    }
                    """;
        context.AddSource("ClassNames.g.cs", codes);
    }
}


