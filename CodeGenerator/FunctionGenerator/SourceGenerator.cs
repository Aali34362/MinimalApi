using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Collections.Immutable;

namespace FunctionGenerator;

[Generator] 
public class SourceGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        //foreach (var compilationSource in context.CompilationProvider.)
        //{
        //    compilationSource.GetRoot().ChildNodes()
        //        .OfType<ClassDeclarationSyntax>();

        //    File.WriteAllText($@"F:\Programming\Asp\AspCore\v8\MinimalApi\MinimalApi\Log\log_{DateTime.Now.ToString("yyyyyMMdd")}.txt", compilationSource.GetText().ToString());
        //}
        //File.WriteAllText($@"F:\Programming\Asp\AspCore\v8\MinimalApi\MinimalApi\Log\log_{DateTime.Now.ToString("yyyyMMdd")}.txt", "Hellos");

        var provider = context
           .SyntaxProvider
           .CreateSyntaxProvider(
               (node, _) => node is ClassDeclarationSyntax,//predicate
               (syntaxContext, _) => (ClassDeclarationSyntax)syntaxContext.Node//transform
           ).Where(x => x is not null);

        var compilation = context
            .CompilationProvider
            .Combine(provider.Collect());
        context.RegisterSourceOutput(compilation, Execute);

        throw new Exception("Hellos \n Worlds");
    }

    private void Execute(SourceProductionContext context, (Compilation compilation, ImmutableArray<ClassDeclarationSyntax> classes) tuple)
    {
        var (compilation, classes) = tuple;
        var code = @"
                    //<auto-generated/>
                    public class Test
                    {
                        public static void P() => Console.WriteLine(""Hello New World"");
                    }";
        context.AddSource("helloworld.g.cs", code);
    }
}


