////https://docs.github.com/en/graphql/overview/explorer

//Basic Query
query {
  viewer {
    login
  }
} {
  viewer {
    id name
    login url
  }
}
//
query getDetails {
  viewer {
    id name
    login url
  }
}
////nested queries
query getDetails {
  viewer {
    id,
    name,
    login,
    url,
    location,
    bio,
    status {
      emoji,
      message
    }
  }
}


// multiple queries
query getDetails {
  viewer {
    id,
    name,
    login,
    url,
    location,
    bio,
  }
} query getDetailsWithStatus {
  viewer {
    id,
    name,
    login,
    url,
    location,
    bio,
    status {
      emoji,
      message
    }
  }
}

//Argument
//login -> Argument
//"Aali34362" -> value
{
  user(login: "Aali34362"
  ) {
    id,
    name,
    url,
    bio,
  }
}

//Alias
{
  amir:
  user(login: "Aali34362"
  ) {
    id,
    name,
    url,
    bio,
  }
  alex:
  user(login: "alex"
  ) {
    id,
    name,
    url,
    bio,
  }
}

//Fragment
{
  amir:
  user(login: "Aali34362"
  ) {
    ...userFields
  }
  alex:
  user(login: "alex"
  ) {
    ...userFields
  }
} fragment userFields on User {
  id,
  name,
  url,
  bio,
} {
  amir:
  user(login: "Aali34362"
  ) {
    ...userFields location
  }
  alex:
  user(login: "alex"
  ) {
    ...userFields
  }
} fragment userFields on User {
  user_id: id,
  name,
  url,
  bio,
}

////Inline Fragment
{
  amir:
  user(login: "Aali34362"
  ) {
    ...userFields location
    ... on
    Actor {
      login avatarUrl
    }
    ... on
    ProfileOwner {
      id websiteUrl
      email
    }
  }
  alex:
  user(login: "alex"
  ) {
    ...userFields
  }
} fragment userFields on User {
  user_id: id,
  name,
  url,
  bio,
}

//Variables
query($loginName: String!) {
  amir:
  user(login: $loginName)
  {
    ...userFields location
    ... on
    Actor {
      login avatarUrl
    }
    ... on
    ProfileOwner {
      id websiteUrl
      email
    }
  }
  alex:
  user(login: "alex"
  ) {
    ...userFields
  }
} fragment userFields on User {
  user_id: id,
  name,
  url,
  bio,
}

//Variables:
{
  "loginName": "Aali34362"
}

//Inline variables in Fragment
query($loginName: String = "Aali34362", $repoName:String!) {
  amir:
  user(login: $loginName)
  {
    ...userFields location
    ... on
    Actor {
      login avatarUrl
    }
    ... on
    ProfileOwner {
      id websiteUrl
      email
    }
  }
  alex:
  user(login: "alex"
  ) {
    ...userFields
  }
} fragment userFields on User {
  user_id: id,
  name,
  url,
  bio,
  repository(name: $repoName)
  {
    name,
    url
  }
}

//Variables:
{
  "loginName": "Aali34362",
  "repoName": "MinimalApi"
}

//Directive -> Include | Skip
query($loadStatus:Boolean!,$loginName: String = "Aali34362", $repoName:String!) {
  amir:
  user(login: $loginName)
  {
    ...userFields location
    ... on
    Actor {
      login avatarUrl
    }
    ... on
    ProfileOwner {
      id websiteUrl
      email
    }
  }
  alex:
  user(login: "alex"
  ) {
    ...userFields
  }
} fragment userFields on User {
  user_id: id,
  name,
  url,
  bio
  @skip(if: $loadStatus),
  repository(name: $repoName)
  {
    name,
    url
  },
  status
  @include(if: $loadStatus)
  {
    emoji,
    message
  }
}

//Variables
{
  "loginName": "Aali34362",
  "repoName": "MinimalApi",
  "loadStatus": true
}


//Pagination
//First | Last
query($loadStatus:Boolean!,$loginName: String = "Aali34362", $repoName:String!){
  amir:user(login : $loginName){
    ...userFields
    location
    ... on Actor{
      login
      avatarUrl      
    }
    ... on ProfileOwner{
      id
      websiteUrl
      email      
    }
  }
  alex:user(login : "alex"){
    ...userFields
  }
}

fragment userFields on User{
 		user_id:id,
    name,
    url,
    bio @skip(if: $loadStatus), 
  repository(name:$repoName){
    name,
    url
  },
  repositories(first: 3){
    totalCount,
    pageInfo{
      hasPreviousPage,
      hasNextPage,
      startCursor,
      endCursor
    },
    edges{
      cursor,
      node{
        name,
        url
      }
    }
  }
  status @include(if: $loadStatus){
    emoji,
    message
  }
}

//After | Before
query($loadStatus:Boolean!,$loginName: String = "Aali34362", $repoName:String!){
  amir:user(login : $loginName){
    ...userFields
    location
    ... on Actor{
      login
      avatarUrl      
    }
    ... on ProfileOwner{
      id
      websiteUrl
      email      
    }
  }
  alex:user(login : "alex"){
    ...userFields
  }
}

fragment userFields on User{
 		user_id:id,
    name,
    url,
    bio @skip(if: $loadStatus), 
  repository(name:$repoName){
    name,
    url
  },
  repositories(first: 3, after: "Y3Vyc29yOnYyOpHOLN-owg=="){
    totalCount,
    pageInfo{
      hasPreviousPage,
      hasNextPage,
      startCursor,
      endCursor
    },
    edges{
      cursor,
      node{
        name,
        url
      }
    }
  }
  status @include(if: $loadStatus){
    emoji,
    message
  }
}

////Order By
query($loadStatus:Boolean!,$loginName: String = "Aali34362", $repoName:String!){
  amir:user(login : $loginName){
    ...userFields
    location
    ... on Actor{
      login
      avatarUrl      
    }
    ... on ProfileOwner{
      id
      websiteUrl
      email      
    }
  }
  alex:user(login : "alex"){
    ...userFields
  }
}

fragment userFields on User{
 		user_id:id,
    name,
    url,
    bio @skip(if: $loadStatus), 
  repository(name:$repoName){
    name,
    url
  },
  repositories(
    first: 3, 
    after: "Y3Vyc29yOnYyOpHOLN-owg==",
  	orderBy: {field: NAME, direction: ASC}
  ){
    totalCount,
    pageInfo{
      hasPreviousPage,
      hasNextPage,
      startCursor,
      endCursor
    },
    edges{
      cursor,
      node{
        name,
        url
      }
    }
  }
  status @include(if: $loadStatus){
    emoji,
    message
  }
}

////Types -> Scalar, Object, Interface, Union, Enum, InputObject

