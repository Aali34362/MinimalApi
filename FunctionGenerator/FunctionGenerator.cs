using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Collections.Immutable;
using System.Text;

namespace FunctionGenerator;

[Generator]
public class FunctionGenerator : ISourceGenerator
{
    public void Execute(GeneratorExecutionContext context)
    {
        //Task.Delay(10000).GetAwaiter().GetResult();
        //#pragma warning disable RS1035 // Do not use APIs banned for analyzers
        // File.WriteAllText(@"F:\\Programming\\Asp\\AspCore\\v8\\MinimalApi\\MinimalApi\\FunctionGenerator\\log.txt", "diag");
        //#pragma warning restore RS1035 // Do not use APIs banned for analyzers
        /*using (StreamWriter writer = new StreamWriter("F:\\Programming\\Asp\\AspCore\\v8\\MinimalApi\\MinimalApi\\FunctionGenerator\\log.txt"))
        {
            writer.Write("your content");
        }*/
        //foreach (var compilationSource in context.Compilation.SyntaxTrees)
        //{
        //    compilationSource.GetRoot().ChildNodes()
        //        .OfType<ClassDeclarationSyntax>();
        //    File.WriteAllText($@"F:\Programming\Asp\AspCore\v8\MinimalApi\MinimalApi\Log\log_{DateTime.Now.ToString("yyyyyMMdd")}.txt", compilationSource.GetText().ToString());
        //}

        //foreach (var compilationSyntaxTree in context.Compilation.SyntaxTrees)
        //{
        //    foreach (var classDeclarationSyntax in compilationSyntaxTree.GetRoot().ChildNodes().OfType<ClassDeclarationSyntax>())
        //    {
        //        File.WriteAllText($@"F:\Programming\Asp\AspCore\v8\MinimalApi\MinimalApi\Log\log_{DateTime.Now.ToString("yyyyyMMdd")}.txt", classDeclarationSyntax.GetText().ToString());
        //    }
        //}

        var output = @"
                public class Test
                {
                    public static void P() => Console.WriteLine(""Hello New World"");
                }";
        context.AddSource("hello.g.cs",output);
        var sb = new StringBuilder();
        sb.Append("public class Test1");
        sb.Append("{");
        sb.Append("public static void P() => Console.WriteLine(\"Hello New World\");");
        sb.Append("}");
        context.AddSource("hellos.g.cs", output);
        throw new Exception("Hello world \n qw");
    }

    public void Initialize(GeneratorInitializationContext context)
    {
        //File.WriteAllText($@"F:\Programming\Asp\AspCore\v8\MinimalApi\MinimalApi\Log\log_{DateTime.Now.ToString("yyyyyMMdd")}.txt", "Hello");
        context.RegisterForSyntaxNotifications(() => new MainSyntaxReceiver());
        //throw new Exception("Hello \n qw");
    }
}

public class MainSyntaxReceiver : ISyntaxReceiver
{
    public int Index { get; set; }

    public void OnVisitSyntaxNode(SyntaxNode syntaxNode)
    {
        if(syntaxNode is ClassDeclarationSyntax)
        {
            //File.WriteAllText($@"F:\Programming\Asp\AspCore\v8\MinimalApi\MinimalApi\Log\log_{DateTime.Now.ToString("yyyyyMMddTHHmmsss")}.txt", syntaxNode.GetText().ToString());
            File.WriteAllText($@"F:\Programming\Asp\AspCore\v8\MinimalApi\MinimalApi\Log\log_{Index++.ToString()}.txt", syntaxNode.GetText().ToString());
        }
    }
}


[Generator] 
public class SourceGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        //foreach (var compilationSource in context.CompilationProvider.)
        //{
        //    compilationSource.GetRoot().ChildNodes()
        //        .OfType<ClassDeclarationSyntax>();

        //    File.WriteAllText($@"F:\Programming\Asp\AspCore\v8\MinimalApi\MinimalApi\Log\log_{DateTime.Now.ToString("yyyyyMMdd")}.txt", compilationSource.GetText().ToString());
        //}
        //File.WriteAllText($@"F:\Programming\Asp\AspCore\v8\MinimalApi\MinimalApi\Log\log_{DateTime.Now.ToString("yyyyMMdd")}.txt", "Hellos");

        var provider = context
           .SyntaxProvider
           .CreateSyntaxProvider(
               (node, _) => node is ClassDeclarationSyntax,//predicate
               (syntaxContext, _) => (ClassDeclarationSyntax)syntaxContext.Node//transform
           ).Where(x => x is not null);

        var compilation = context
            .CompilationProvider
            .Combine(provider.Collect());
        context.RegisterSourceOutput(compilation, Execute);

        throw new Exception("Hellos \n Worlds");
    }

    private void Execute(SourceProductionContext context, (Compilation compilation, ImmutableArray<ClassDeclarationSyntax> classes) tuple)
    {
        var (compilation, classes) = tuple;
        var code = @"
                    //<auto-generated/>
                    public class Test
                    {
                        public static void P() => Console.WriteLine(""Hello New World"");
                    }";
        context.AddSource("helloworld.g.cs", code);
    }
}


