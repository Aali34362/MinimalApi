using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Collections.Immutable;

namespace SourceGenerator.Generator;

[Generator]
public class EndPointsGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var provider = context
            .SyntaxProvider
            .CreateSyntaxProvider(
                (node, _) => node is ClassDeclarationSyntax,//predicate
                (syntaxContext, _) => (ClassDeclarationSyntax)syntaxContext.Node//transform
            ).Where(x => x is not null);

        var compilation = context
            .CompilationProvider
            .Combine(provider.Collect());
        context.RegisterSourceOutput(compilation, Execute);
    }

    private void Execute(SourceProductionContext context, (Compilation compilation, ImmutableArray<ClassDeclarationSyntax> classes) tuple)
    {
        var (compilation, classes) = tuple;
        var code = """
                    //<auto-generated/>
                    namespace MinimalApi.EndPoints;

                    public static class EndpointsExtension
                    {
                        public static IEndpointRouteBuilder MapAllEndpoints(this IEndpointRouteBuilder endpoints)
                        {
                            return endpoints;
                        }
                    }
                    """;
        context.AddSource("EndpointsExtension.cs", code);
    }


}
